
@using Newtonsoft.Json;
@using Online_book_shop.Models;
@using Online_book_shop.Handlers.Business;
@using Online_book_shop.Models.ViewModel;
@using Online_book_shop.Handlers.Helper;
@using Online_book_shop.Models;
@{
    Order order = ViewBag.Order;
    Cart cart = ViewBag.Cart;

    Address billing_address = BusinessHandlerAddress.GetAddress(order.BillingAddressId);
    Address delivery_address = BusinessHandlerAddress.GetAddress(order.DeliveryAddressId);
    List<PaymentMethod> Obj_payment_option = new List<PaymentMethod>();
    Configuration conf_payment_option = BusinessHandlerConfigurations.GetConfigByKey("PAYMENT_METHODS");
    if (conf_payment_option != null && !string.IsNullOrEmpty(conf_payment_option.Value))
    {
        Obj_payment_option = JsonConvert.DeserializeObject<List<PaymentMethod>>(conf_payment_option.Value);
    }
    PaymentMethod paymentObj = Obj_payment_option.Where(x => x.EnumId == order.PaymentMethod).FirstOrDefault();
    decimal remainingAmount = cart.AmountAfterDiscount;
}
@*<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />*@
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<div class="container">

    @if (cart.Items != null)
    {
        <div class="container carttable">
            <table style="width:100%">
                <tr>
                    <th>Book Name</th>
                    <th>&nbsp;</th>
                    <th>Quantity</th>
                    <th>Total Price</th>
                    <th>Discount</th>
                    <th>Net Total</th>
                </tr>
                @foreach (Cart_Book cb in cart.Items)
                {
                    BookVMTile b = BusinessHandlerBook.GetSearchedBookForView(cb.BookId);
                    <tr>

                        <td>@b.BookName</td>
                        <td>
                            @{
                                BookProperties p = b.Property.Where(x => x.Id == cb.BookPropertyId).FirstOrDefault();
                                if (p != null)
                                {
                                    <span>@p.Title</span>
                                }
                                else
                                {
                                    <span></span>
                                }
                            }
                        </td>
                        <td>
                            <span>@cb.NumberOfItems</span>
                        </td>
                        <td>Rs : @cb.AmountBeforeDiscount</td>
                        <td>Rs : @cb.Discount</td>
                        <td>Rs : @cb.AmountAfterDiscount</td>
                    </tr>
                }

                <tr>
                    <td></td>
                    <td></td>
                    <td>@cart.Items.Count Item(s)</td>
                    <td>Rs : @cart.AmountBeforeDiscount</td>
                    <td>Rs : @cart.Discount</td>
                    <td>Rs : @cart.AmountAfterDiscount</td>
                </tr>
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>
                        <h4>Delivery Charges</h4>
                        @if ((int)DeliveryTypes.Postal_Service == order.DeliveryMethod)
                        {
                            <span>(Postal)</span>
                        }
                        else if ((int)DeliveryTypes.Currier_Service == order.DeliveryMethod)
                        {
                            <span>(Courier)</span>
                        }
                        else if ((int)DeliveryTypes.In_Store_Pickup == order.DeliveryMethod)
                        {
                            <span>(In Stock Pickup)</span>
                        }
                        else if ((int)DeliveryTypes.Foreign_Airmail == order.DeliveryMethod)
                        {
                            <span>(Airmail)</span>
                        }
                        else if ((int)DeliveryTypes.EMS == order.DeliveryMethod)
                        {
                            <span>(EMS)</span>
                        }
                    </td>
                    <td><h4>Rs : @order.DeliveryCharges</h4></td>
                </tr>
                <tr class="grandtotal">
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td><h3>Total Amount</h3></td>
                    <td><h3>Rs : @(cart.AmountAfterDiscount + order.DeliveryCharges)</h3></td>
                </tr>
                @{
                    decimal AmountTobeCollected = cart.AmountAfterDiscount + order.DeliveryCharges;
                    if (!string.IsNullOrEmpty(cart.VoucherCode))
                    {
                        Voucher voucher = BusinessHandlerVoucher.GetActiveVoucherByCode(cart.VoucherCode);
                        remainingAmount = (cart.AmountAfterDiscount + order.DeliveryCharges) - voucher.VoucherAmount;
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td><h4>Voucher Added (@voucher.Code)</h4></td>
                            <td><h4>Rs : @voucher.VoucherAmount</h4></td>
                        </tr>
                        if ((cart.AmountAfterDiscount + order.DeliveryCharges) - voucher.VoucherAmount > -1)
                        {
                            AmountTobeCollected = ((cart.AmountAfterDiscount + order.DeliveryCharges) - voucher.VoucherAmount);
                            <tr class="grandtotal">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td><h3>Remaining Payment</h3></td>
                                <td><h3>Rs : @((cart.AmountAfterDiscount + order.DeliveryCharges) - voucher.VoucherAmount)</h3></td>
                            </tr>
                        }
                        else
                        {
                            AmountTobeCollected = 0;
                            <tr class="grandtotal">
                                <td></td>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td><h3>Remaining Payment</h3></td>
                                <td><h3>Rs : 0.00</h3></td>
                            </tr>
                        }

                    }
                }
            </table>
            @{
                string domain = Request.Url.ToString().Replace(Request.Url.AbsolutePath, "");
                string formSubmitUrl = "/Payment/MintPayPaymentRequest";//
                if (remainingAmount < 0 || remainingAmount == 0)
                {
                    formSubmitUrl = "/Delivery/OrderConfirmation?Ref=" + order.UId;
                }
            }
        <form id="frm-payment-details" method="post" action="@formSubmitUrl">
            <input type="hidden" name="OrderId" value="@order.UId" />
            <input type="hidden" name="CartId" value="@cart.Id" />
            <input type="hidden" name="TotalAmount" value="@AmountTobeCollected" />
            <input type="submit" />
        </form>



        </div>
    }
</div>



